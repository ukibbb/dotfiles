[
	// Standard macOS bindings
	{
		"use_key_equivalents": true,
		"bindings": {
			// !!!
			// "fn-": "menu::SelectFirst",
			// "fn-": "menu::SelectLast",
			"shift-j": "menu::SelectNext",
			"shift-k": "menu::SelectPrev",
			"enter": "menu::Confirm",
			// "ctrl-enter": "menu::SecondaryConfirm",
			// "cmd-enter": "menu::SecondaryConfirm",
			"shift-c": "menu::Cancel",
			"escape": "menu::Cancel",
			// "alt-shift-enter": "menu::Restart",
			"cmd-shift-w": "workspace::CloseWindow",
			"shift-escape": "workspace::ToggleZoom",
			"cmd-o": "workspace::Open",
			"cmd-=": "zed::IncreaseBufferFontSize",
			"cmd-+": "zed::IncreaseBufferFontSize",
			"cmd--": "zed::DecreaseBufferFontSize",
			"cmd-0": "zed::ResetBufferFontSize",
			"cmd-,": "zed::OpenSettings",
			"cmd-1": "zed::Quit",
			// "cmd-h": "zed::Hide",
			"alt-cmd-h": "zed::HideOthers",
			"cmd-m": "zed::Minimize",
			"fn-f": "zed::ToggleFullScreen",
			"ctrl-cmd-f": "zed::ToggleFullScreen",
			"ctrl-shift-z": "zeta::RateCompletions",
			"ctrl-shift-i": "inline_completion::ToggleMenu"
		}
	},
	{
		"context": "Editor",
		"use_key_equivalents": true,
		"bindings": {
			"escape": "editor::Cancel",
			"shift-backspace": "editor::Backspace",
			"ctrl-h": "editor::Backspace",
			"backspace": "editor::Backspace",
			"ctrl-d": "editor::Delete",
			"delete": "editor::Delete",
			"tab": "editor::Tab",
			"shift-tab": "editor::TabPrev",
			"ctrl-t": "editor::Transpose",
			"ctrl-k": "editor::KillRingCut",
			"ctrl-y": "editor::KillRingYank",
			"cmd-k cmd-q": "editor::Rewrap",
			"cmd-k q": "editor::Rewrap",
			"cmd-backspace": "editor::DeleteToBeginningOfLine",
			"cmd-delete": "editor::DeleteToEndOfLine",
			"alt-backspace": "editor::DeleteToPreviousWordStart",
			"ctrl-w": "editor::DeleteToPreviousWordStart",
			"alt-delete": "editor::DeleteToNextWordEnd",
			"cmd-x": "editor::Cut",
			"cmd-c": "editor::Copy",
			"cmd-v": "editor::Paste",
			"cmd-z": "editor::Undo",
			"cmd-shift-z": "editor::Redo",
			"up": "editor::MoveUp",
			"ctrl-up": "editor::MoveToStartOfParagraph",
			"pageup": "editor::MovePageUp",
			"shift-pageup": "editor::SelectPageUp",
			"cmd-pageup": "editor::PageUp",
			"ctrl-pageup": "editor::LineUp",
			"down": "editor::MoveDown",
			"ctrl-down": "editor::MoveToEndOfParagraph",
			"pagedown": "editor::MovePageDown",
			"shift-pagedown": "editor::SelectPageDown",
			"cmd-pagedown": "editor::PageDown",
			"ctrl-pagedown": "editor::LineDown",
			"ctrl-p": "editor::MoveUp",
			"ctrl-n": "editor::MoveDown",
			"ctrl-b": "editor::MoveLeft",
			"left": "editor::MoveLeft",
			"ctrl-f": "editor::MoveRight",
			"right": "editor::MoveRight",
			"ctrl-l": "editor::ScrollCursorCenter",
			"alt-left": "editor::MoveToPreviousWordStart",
			"alt-right": "editor::MoveToNextWordEnd",
			"cmd-left": "editor::MoveToBeginningOfLine",
			"ctrl-a": "editor::MoveToBeginningOfLine",
			"home": "editor::MoveToBeginningOfLine",
			"cmd-right": "editor::MoveToEndOfLine",
			"ctrl-e": "editor::MoveToEndOfLine",
			"end": "editor::MoveToEndOfLine",
			"cmd-up": "editor::MoveToBeginning",
			"cmd-down": "editor::MoveToEnd",
			"shift-up": "editor::SelectUp",
			"ctrl-shift-p": "editor::SelectUp",
			"shift-down": "editor::SelectDown",
			"ctrl-shift-n": "editor::SelectDown",
			"shift-left": "editor::SelectLeft",
			"ctrl-shift-b": "editor::SelectLeft",
			"shift-right": "editor::SelectRight",
			"ctrl-shift-f": "editor::SelectRight",
			"alt-shift-left": "editor::SelectToPreviousWordStart", // cursorWordLeftSelect
			"alt-shift-right": "editor::SelectToNextWordEnd", // cursorWordRightSelect
			"ctrl-shift-up": "editor::SelectToStartOfParagraph",
			"ctrl-shift-down": "editor::SelectToEndOfParagraph",
			"cmd-shift-up": "editor::SelectToBeginning",
			"cmd-shift-down": "editor::SelectToEnd",
			"cmd-a": "editor::SelectAll",
			// "cmd-l": "editor::SelectLine",
			"cmd-shift-i": "editor::Format",
			"cmd-shift-left": ["editor::SelectToBeginningOfLine", { "stop_at_soft_wraps": true }],
			"shift-home": ["editor::SelectToBeginningOfLine", { "stop_at_soft_wraps": true }],
			"ctrl-shift-a": ["editor::SelectToBeginningOfLine", { "stop_at_soft_wraps": true }],
			"cmd-shift-right": ["editor::SelectToEndOfLine", { "stop_at_soft_wraps": true }],
			"shift-end": ["editor::SelectToEndOfLine", { "stop_at_soft_wraps": true }],
			"ctrl-shift-e": ["editor::SelectToEndOfLine", { "stop_at_soft_wraps": true }],
			"ctrl-v": ["editor::MovePageDown", { "center_cursor": true }],
			"ctrl-shift-v": ["editor::MovePageUp", { "center_cursor": true }],
			"ctrl-cmd-space": "editor::ShowCharacterPalette",
			"cmd-;": "editor::ToggleLineNumbers",
			"cmd-alt-z": "editor::RevertSelectedHunks",
			"cmd-'": "editor::ToggleHunkDiff",
			"cmd-\"": "editor::ExpandAllHunkDiffs",
			// !!!
			"g b": "editor::ToggleGitBlame",
			"cmd-i": "editor::ShowSignatureHelp",
			"ctrl-f12": "editor::GoToDeclaration",
			"alt-ctrl-f12": "editor::GoToDeclarationSplit"
		}
	},
	{
		"context": "Editor && mode == full",
		"use_key_equivalents": true,
		"bindings": {
			"shift-enter": "editor::Newline",
			// "enter": "editor::Newline",
			"cmd-enter": "editor::NewlineBelow",
			"cmd-shift-enter": "editor::NewlineAbove",
			"cmd-k z": "editor::ToggleSoftWrap",
			// !!!
			// "cmd-f": "buffer_search::Deploy",
			"cmd-alt-f": ["buffer_search::Deploy", { "replace_enabled": true }],
			"cmd-alt-l": ["buffer_search::Deploy", { "selection_search_enabled": true }],
			"cmd-e": ["buffer_search::Deploy", { "focus": false }],
			"cmd->": "assistant::QuoteSelection",
			"cmd-<": "assistant::InsertIntoEditor",
			"cmd-alt-e": "editor::SelectEnclosingSymbol"
		}
	},
	{
		"context": "Editor && mode == full && inline_completion",
		"use_key_equivalents": true,
		"bindings": {
			"alt-tab": "editor::NextInlineCompletion",
			"alt-shift-tab": "editor::PreviousInlineCompletion",
			"ctrl-cmd-right": "editor::AcceptPartialInlineCompletion"
		}
	},
	{
		"context": "Editor && !inline_completion",
		"use_key_equivalents": true,
		"bindings": {
			"alt-tab": "editor::ShowInlineCompletion"
		}
	},
	{
		"context": "Editor && mode == auto_height",
		"use_key_equivalents": true,
		"bindings": {
			"ctrl-enter": "editor::Newline",
			"shift-enter": "editor::Newline",
			"ctrl-shift-enter": "editor::NewlineBelow"
		}
	},
	{
		"context": "Markdown",
		"use_key_equivalents": true,
		"bindings": {
			"cmd-c": "markdown::Copy"
		}
	},
	{
		"context": "Editor && jupyter && !ContextEditor",
		"use_key_equivalents": true,
		"bindings": {
			"ctrl-shift-enter": "repl::Run",
			"ctrl-alt-enter": "repl::RunInPlace"
		}
	},
	{
		"context": "AssistantPanel",
		"use_key_equivalents": true,
		"bindings": {
			"cmd-k c": "assistant::CopyCode",
			"cmd-shift-e": "project_panel::ToggleFocus",
			"cmd-g": "search::SelectNextMatch",
			"cmd-shift-g": "search::SelectPrevMatch",
			"cmd-alt-/": "assistant::ToggleModelSelector",
			"cmd-k h": "assistant::DeployHistory",
			"cmd-k l": "assistant::DeployPromptLibrary",
			"cmd-n": "assistant::NewContext"
		}
	},
	{
		"context": "ContextEditor > Editor",
		"use_key_equivalents": true,
		"bindings": {
			"cmd-enter": "assistant::Assist",
			"cmd-shift-enter": "assistant::Edit",
			"cmd-s": "workspace::Save",
			"cmd->": "assistant::QuoteSelection",
			"cmd-<": "assistant::InsertIntoEditor",
			"shift-enter": "assistant::Split",
			"ctrl-r": "assistant::CycleMessageRole",
			"enter": "assistant::ConfirmCommand",
			"alt-enter": "editor::Newline"
		}
	},
	{
		"context": "AssistantPanel2",
		"use_key_equivalents": true,
		"bindings": {
			"cmd-n": "assistant2::NewThread",
			"cmd-alt-p": "assistant2::NewPromptEditor",
			"cmd-shift-h": "assistant2::OpenHistory",
			"cmd-alt-/": "assistant2::ToggleModelSelector",
			"cmd-shift-a": "assistant2::ToggleContextPicker",
			"cmd-e": "assistant2::ChatMode",
			"cmd-alt-e": "assistant2::RemoveAllContext"
		}
	},
	{
		"context": "MessageEditor > Editor",
		"use_key_equivalents": true,
		"bindings": {
			"enter": "assistant2::Chat"
		}
	},
	{
		"context": "ContextStrip",
		"use_key_equivalents": true,
		"bindings": {
			"up": "assistant2::FocusUp",
			"right": "assistant2::FocusRight",
			"left": "assistant2::FocusLeft",
			"down": "assistant2::FocusDown",
			"backspace": "assistant2::RemoveFocusedContext",
			"enter": "assistant2::AcceptSuggestedContext"
		}
	},
	{
		"context": "ThreadHistory",
		"bindings": {
			"backspace": "assistant2::RemoveSelectedThread"
		}
	},
	{
		"context": "PromptLibrary",
		"use_key_equivalents": true,
		"bindings": {
			"cmd-n": "prompt_library::NewPrompt",
			"cmd-shift-s": "prompt_library::ToggleDefaultPrompt",
			"cmd-w": "workspace::CloseWindow"
		}
	},
	{
		"context": "BufferSearchBar",
		"use_key_equivalents": true,
		"bindings": {
			// !!!
			"escape": "buffer_search::Dismiss",
			"tab": "buffer_search::FocusEditor",
			// "enter": "search::SelectNextMatch",
			// "shift-enter": "search::SelectPrevMatch",
			"alt-enter": "search::SelectAllMatches",
			// "cmd-f": "search::FocusSearch",
			"cmd-alt-f": "search::ToggleReplace",
			"cmd-alt-l": "search::ToggleSelection"
		}
	},
	{
		"context": "BufferSearchBar && in_replace > Editor",
		"use_key_equivalents": true,
		"bindings": {
			"enter": "search::ReplaceNext",
			"cmd-enter": "search::ReplaceAll"
		}
	},
	{
		"context": "BufferSearchBar && !in_replace > Editor",
		"use_key_equivalents": true,
		"bindings": {
			"up": "search::PreviousHistoryQuery",
			"down": "search::NextHistoryQuery"
		}
	},
	{
		"context": "ProjectSearchBar",
		"use_key_equivalents": true,
		"bindings": {
			// !!!
			"escape": "project_search::ToggleFocus",
			"cmd-shift-j": "project_search::ToggleFilters",
			"cmd-shift-f": "search::FocusSearch",
			"cmd-shift-h": "search::ToggleReplace",
			"alt-cmd-g": "search::ToggleRegex",
			"alt-cmd-x": "search::ToggleRegex"
		}
	},
	{
		"context": "ProjectSearchBar > Editor",
		"use_key_equivalents": true,
		"bindings": {
			"up": "search::PreviousHistoryQuery",
			"down": "search::NextHistoryQuery"
		}
	},
	{
		"context": "ProjectSearchBar && in_replace > Editor",
		"use_key_equivalents": true,
		"bindings": {
			"enter": "search::ReplaceNext",
			"cmd-enter": "search::ReplaceAll"
		}
	},
	{
		"context": "ProjectSearchView",
		"use_key_equivalents": true,
		"bindings": {
			"escape": "project_search::ToggleFocus",
			"cmd-shift-j": "project_search::ToggleFilters",
			"cmd-shift-h": "search::ToggleReplace",
			"alt-cmd-g": "search::ToggleRegex",
			"alt-cmd-x": "search::ToggleRegex"
		}
	},
	{
		"context": "Pane",
		"use_key_equivalents": true,
		"bindings": {
			// !!!
			// "alt-cmd-left": "pane::ActivatePrevItem",
			"cmd-h": "pane::ActivatePrevItem",
			// "alt-cmd-right": "pane::ActivateNextItem",
			"cmd-l": "pane::ActivateNextItem",
			"ctrl-shift-pageup": "pane::SwapItemLeft",
			"ctrl-shift-pagedown": "pane::SwapItemRight",
			// !!!
			"cmd-q": "pane::CloseActiveItem",
			"alt-cmd-t": ["pane::CloseInactiveItems", { "close_pinned": false }],
			"ctrl-alt-cmd-w": "workspace::CloseInactiveTabsAndPanes",
			"cmd-k e": ["pane::CloseItemsToTheLeft", { "close_pinned": false }],
			"cmd-k t": ["pane::CloseItemsToTheRight", { "close_pinned": false }],
			"cmd-k u": ["pane::CloseCleanItems", { "close_pinned": false }],
			"cmd-k cmd-w": ["pane::CloseAllItems", { "close_pinned": false }],
			"cmd-f": "project_search::ToggleFocus",
			// "cmd-g": "search::SelectNextMatch",
			// "cmd-shift-g": "search::SelectPrevMatch",
			"cmd-shift-h": "search::ToggleReplace",
			"cmd-alt-l": "search::ToggleSelection",
			"alt-enter": "search::SelectAllMatches",
			"alt-cmd-c": "search::ToggleCaseSensitive",
			"alt-cmd-w": "search::ToggleWholeWord",
			"alt-cmd-f": "project_search::ToggleFilters",
			"alt-cmd-x": "search::ToggleRegex",
			"cmd-k shift-enter": "pane::TogglePinTab"
		}
	},
	// Bindings from VS Code
	// {
	// 	"context": "Editor",
	// 	"use_key_equivalents": true,
	// 	"bindings": {
	// 		"cmd-[": "editor::Outdent",
	// 		"cmd-]": "editor::Indent",
	// 		"cmd-ctrl-p": "editor::AddSelectionAbove", // Insert cursor above
	// 		"cmd-alt-up": "editor::AddSelectionAbove",
	// 		"cmd-ctrl-n": "editor::AddSelectionBelow", // Insert cursor below
	// 		"cmd-alt-down": "editor::AddSelectionBelow",
	// 		"cmd-shift-k": "editor::DeleteLine",
	// 		"alt-up": "editor::MoveLineUp",
	// 		"alt-down": "editor::MoveLineDown",
	// 		"alt-shift-up": "editor::DuplicateLineUp",
	// 		"alt-shift-down": "editor::DuplicateLineDown",
	// 		"ctrl-shift-right": "editor::SelectLargerSyntaxNode", // Expand Selection
	// 		"ctrl-shift-left": "editor::SelectSmallerSyntaxNode", // Shrink Selection
	// 		"cmd-d": ["editor::SelectNext", { "replace_newest": false }], // Add selection to Next Find Match
	// 		"cmd-shift-l": "editor::SelectAllMatches", // Select all occurrences of current selection
	// 		"cmd-f2": "editor::SelectAllMatches", // Select all occurrences of current word
	// 		"ctrl-cmd-d": ["editor::SelectPrevious", { "replace_newest": false }],
	// 		"cmd-k cmd-d": ["editor::SelectNext", { "replace_newest": true }],
	// 		"cmd-k ctrl-cmd-d": ["editor::SelectPrevious", { "replace_newest": true }],
	// 		"cmd-k cmd-i": "editor::Hover",
	// 		"cmd-/": ["editor::ToggleComments", { "advance_downwards": false }],
	// 		"cmd-u": "editor::UndoSelection",
	// 		"cmd-shift-u": "editor::RedoSelection",
	// 		"f8": "editor::GoToDiagnostic",
	// 		"shift-f8": "editor::GoToPrevDiagnostic",
	// 		"f2": "editor::Rename",
	// 		"f12": "editor::GoToDefinition",
	// 		"alt-f12": "editor::GoToDefinitionSplit",
	// 		"cmd-f12": "editor::GoToTypeDefinition",
	// 		"shift-f12": "editor::GoToImplementation",
	// 		"alt-cmd-f12": "editor::GoToTypeDefinitionSplit",
	// 		"alt-shift-f12": "editor::FindAllReferences",
	// 		"cmd-|": "editor::MoveToEnclosingBracket",
	// 		"ctrl-m": "editor::MoveToEnclosingBracket",
	// 		"alt-cmd-[": "editor::Fold",
	// 		"alt-cmd-]": "editor::UnfoldLines",
	// 		"cmd-k cmd-l": "editor::ToggleFold",
	// 		"cmd-k cmd-[": "editor::FoldRecursive",
	// 		"cmd-k cmd-]": "editor::UnfoldRecursive",
	// 		"cmd-k cmd-1": ["editor::FoldAtLevel", { "level": 1 }],
	// 		"cmd-k cmd-2": ["editor::FoldAtLevel", { "level": 2 }],
	// 		"cmd-k cmd-3": ["editor::FoldAtLevel", { "level": 3 }],
	// 		"cmd-k cmd-4": ["editor::FoldAtLevel", { "level": 4 }],
	// 		"cmd-k cmd-5": ["editor::FoldAtLevel", { "level": 5 }],
	// 		"cmd-k cmd-6": ["editor::FoldAtLevel", { "level": 6 }],
	// 		"cmd-k cmd-7": ["editor::FoldAtLevel", { "level": 7 }],
	// 		"cmd-k cmd-8": ["editor::FoldAtLevel", { "level": 8 }],
	// 		"cmd-k cmd-9": ["editor::FoldAtLevel", { "level": 9 }],
	// 		"cmd-k cmd-0": "editor::FoldAll",
	// 		"cmd-k cmd-j": "editor::UnfoldAll",
	// 		// Using `ctrl-space` in Zed requires disabling the macOS global shortcut.
	// 		// System Preferences->Keyboard->Keyboard Shortcuts->Input Sources->Select the previous input source (uncheck)
	// 		"ctrl-space": "editor::ShowCompletions",
	// 		"cmd-.": "editor::ToggleCodeActions",
	// 		"cmd-k r": "editor::RevealInFileManager",
	// 		"cmd-k p": "editor::CopyPath",
	// 		"cmd-\\": "pane::SplitRight",
	// 		"cmd-k v": "markdown::OpenPreviewToTheSide",
	// 		"cmd-shift-v": "markdown::OpenPreview",
	// 		"ctrl-cmd-c": "editor::DisplayCursorNames"
	// 	}
	// },
	{
		"context": "Editor && mode == full",
		"use_key_equivalents": true,
		"bindings": {
			"cmd-shift-o": "outline::Toggle",
			"ctrl-g": "go_to_line::Toggle"
		}
	},
	{
		"context": "Pane",
		"use_key_equivalents": true,
		"bindings": {
			"ctrl-1": ["pane::ActivateItem", 0],
			"ctrl-2": ["pane::ActivateItem", 1],
			"ctrl-3": ["pane::ActivateItem", 2],
			"ctrl-4": ["pane::ActivateItem", 3],
			"ctrl-5": ["pane::ActivateItem", 4],
			"ctrl-6": ["pane::ActivateItem", 5],
			"ctrl-7": ["pane::ActivateItem", 6],
			"ctrl-8": ["pane::ActivateItem", 7],
			"ctrl-9": ["pane::ActivateItem", 8],
			"ctrl-0": "pane::ActivateLastItem",
			"ctrl--": "pane::GoBack",
			"ctrl-shift--": "pane::GoForward"
			// !!!
			// "cmd-shift-f": "pane::DeploySearch"
		}
	},
	{
		"context": "Workspace",
		"use_key_equivalents": true,
		"bindings": {
			// Change the default action on `menu::Confirm` by setting the parameter
			// "alt-cmd-o": ["projects::OpenRecent", {"create_new_window": true }],
			"alt-cmd-o": "projects::OpenRecent",
			"ctrl-cmd-o": "projects::OpenRemote",
			// !!!
			"alt-cmd-b": "branches::OpenRecent",
			"alt-t": "workspace::NewTerminal",
			"cmd-s": "workspace::Save",
			"cmd-k s": "workspace::SaveWithoutFormat",
			"cmd-shift-s": "workspace::SaveAs",
			"cmd-shift-n": "workspace::NewWindow",
			// !!! terminal
			"cmd-`": "terminal_panel::ToggleFocus",
			// !!!
			"cmd-1": ["workspace::ActivatePane", 0],
			"cmd-2": ["workspace::ActivatePane", 1],
			"cmd-3": ["workspace::ActivatePane", 2],
			"cmd-4": ["workspace::ActivatePane", 3],
			"cmd-5": ["workspace::ActivatePane", 4],
			"cmd-6": ["workspace::ActivatePane", 5],
			"cmd-7": ["workspace::ActivatePane", 6],
			"cmd-8": ["workspace::ActivatePane", 7],
			"cmd-9": ["workspace::ActivatePane", 8],
			// !!!
			// "cmd-l ": "workspace::ToggleLeftDock",
			"cmd-r": "workspace::ToggleRightDock",
			"cmd-b": "workspace::ToggleBottomDock",

			"alt-cmd-y": "workspace::CloseAllDocks",
			// !!!
			// "cmd-shift-f": "pane::DeploySearch",
			"cmd-shift-h": ["pane::DeploySearch", { "replace_enabled": true }],
			"cmd-shift-t": "pane::ReopenClosedItem",
			// "cmd-k cmd-s": "zed::OpenKeymap",
			"cmd-k cmd-t": "theme_selector::Toggle",
			// !!!
			"cmd-p": "project_symbols::Toggle",
			"cmd-f": "file_finder::Toggle",

			"ctrl-tab": "tab_switcher::Toggle",
			"ctrl-shift-tab": ["tab_switcher::Toggle", { "select_last": true }],
			// "cmd-shift-p": "command_palette::Toggle",
			"cmd-shift-m": "diagnostics::Deploy",
			"cmd-shift-e": "project_panel::ToggleFocus",
			"cmd-shift-b": "outline_panel::ToggleFocus",
			"cmd-?": "assistant::ToggleFocus",
			"cmd-alt-s": "workspace::SaveAll",
			"cmd-k m": "language_selector::Toggle",
			"escape": "workspace::Unfollow",
			// "cmd-k cmd-left": ["workspace::ActivatePaneInDirection", "Left"],
			// "cmd-k cmd-right": ["workspace::ActivatePaneInDirection", "Right"],
			// "cmd-k cmd-up": ["workspace::ActivatePaneInDirection", "Up"],
			// "cmd-k cmd-down": ["workspace::ActivatePaneInDirection", "Down"],
			// "cmd-k shift-left": ["workspace::SwapPaneInDirection", "Left"],
			// "cmd-k shift-right": ["workspace::SwapPaneInDirection", "Right"],
			// "cmd-k shift-up": ["workspace::SwapPaneInDirection", "Up"],
			// "cmd-k shift-down": ["workspace::SwapPaneInDirection", "Down"],
			"cmd-shift-x": "zed::Extensions"
		}
	},
	{
		"context": "Workspace && !Terminal",
		"use_key_equivalents": true,
		"bindings": {
			// !!!
			// "cmd-n": "workspace::NewFile",
			"cmd-shift-r": "task::Spawn",
			"cmd-alt-r": "task::Rerun",
			"ctrl-alt-shift-r": ["task::Spawn", { "reveal_target": "center" }]
			// also possible to spawn tasks by name:
			// "foo-bar": ["task::Spawn", { "task_name": "MyTask", "reveal_target": "dock" }]
		}
	},
	// Bindings from Sublime Text
	// {
	// 	"context": "Editor",
	// 	"use_key_equivalents": true,
	// 	"bindings": {
	// 		"ctrl-j": "editor::JoinLines",
	// 		"ctrl-alt-backspace": "editor::DeleteToPreviousSubwordStart",
	// 		"ctrl-alt-h": "editor::DeleteToPreviousSubwordStart",
	// 		"ctrl-alt-delete": "editor::DeleteToNextSubwordEnd",
	// 		"ctrl-alt-d": "editor::DeleteToNextSubwordEnd",
	// 		"ctrl-alt-left": "editor::MoveToPreviousSubwordStart",
	// 		"ctrl-alt-b": "editor::MoveToPreviousSubwordStart",
	// 		"ctrl-alt-right": "editor::MoveToNextSubwordEnd",
	// 		"ctrl-alt-f": "editor::MoveToNextSubwordEnd",
	// 		"ctrl-alt-shift-left": "editor::SelectToPreviousSubwordStart",
	// 		"ctrl-alt-shift-b": "editor::SelectToPreviousSubwordStart",
	// 		"ctrl-alt-shift-right": "editor::SelectToNextSubwordEnd",
	// 		"ctrl-alt-shift-f": "editor::SelectToNextSubwordEnd"
	// 	}
	// },
	// Bindings from Atom
	// {
	// 	"context": "Pane",
	// 	"use_key_equivalents": true,
	// 	"bindings": {
	// 		"cmd-k up": "pane::SplitUp",
	// 		"cmd-k down": "pane::SplitDown",
	// 		"cmd-k left": "pane::SplitLeft",
	// 		"cmd-k right": "pane::SplitRight"
	// 	}
	// },
	// Bindings that should be unified with bindings for more general actions
	{
		"context": "Editor && renaming",
		"use_key_equivalents": true,
		"bindings": {
			"enter": "editor::ConfirmRename"
		}
	},
	{
		"context": "Editor && showing_completions",
		"use_key_equivalents": true,
		"bindings": {
			"enter": "editor::ConfirmCompletion",
			// "tab": "editor::ComposeCompletion"
		}
	},
	{
		"context": "Editor && inline_completion && !showing_completions",
		"use_key_equivalents": true,
		"bindings": {
			// "tab": "editor::AcceptInlineCompletion"
		}
	},
	{
		"context": "Editor && showing_code_actions",
		"use_key_equivalents": true,
		"bindings": {
			"enter": "editor::ConfirmCodeAction"
		}
	},
	{
		"context": "Editor && (showing_code_actions || showing_completions)",
		"use_key_equivalents": true,
		"bindings": {
			"shift-k": "editor::ContextMenuPrev",
			"shift-j": "editor::ContextMenuNext"
		}
	},
	// Custom bindings
	{
		"use_key_equivalents": true,
		"bindings": {
			"ctrl-alt-cmd-f": "workspace::FollowNextCollaborator",
			// TODO: Move this to a dock open action
			"cmd-shift-c": "collab_panel::ToggleFocus",
			"cmd-alt-i": "zed::DebugElements",
			"ctrl-:": "editor::ToggleInlayHints"
		}
	},
	{
		"context": "Editor && mode == full",
		"use_key_equivalents": true,
		"bindings": {
			"alt-enter": "editor::OpenExcerpts",
			"shift-enter": "editor::ExpandExcerpts",
			"cmd-k enter": "editor::OpenExcerptsSplit",
			"cmd-shift-e": "pane::RevealInProjectPanel",
			"cmd-f8": "editor::GoToHunk",
			"cmd-shift-f8": "editor::GoToPrevHunk",
			"ctrl-enter": "assistant::InlineAssist"
		}
	},
	{
		"context": "ProposedChangesEditor",
		"use_key_equivalents": true,
		"bindings": {
			"cmd-shift-y": "editor::ApplyDiffHunk",
			"cmd-shift-a": "editor::ApplyAllDiffHunks"
		}
	},
	{
		"context": "PromptEditor",
		"use_key_equivalents": true,
		"bindings": {
			"cmd-shift-a": "assistant2::ToggleContextPicker",
			"cmd-alt-/": "assistant2::ToggleModelSelector",
			"cmd-alt-e": "assistant2::RemoveAllContext",
			"ctrl-[": "assistant::CyclePreviousInlineAssist",
			"ctrl-]": "assistant::CycleNextInlineAssist"
		}
	},
	{
		"context": "ProjectSearchBar && !in_replace",
		"use_key_equivalents": true,
		"bindings": {
			"cmd-enter": "project_search::SearchInNew"
		}
	},
	{
		"context": "OutlinePanel && not_editing",
		"use_key_equivalents": true,
		"bindings": {
			"escape": "menu::Cancel",
			"left": "outline_panel::CollapseSelectedEntry",
			"right": "outline_panel::ExpandSelectedEntry",
			"cmd-alt-c": "outline_panel::CopyPath",
			"alt-cmd-shift-c": "outline_panel::CopyRelativePath",
			"alt-cmd-r": "outline_panel::RevealInFileManager",
			"space": "outline_panel::Open",
			"shift-down": "menu::SelectNext",
			"shift-up": "menu::SelectPrev",
			"alt-enter": "editor::OpenExcerpts",
			"cmd-k enter": "editor::OpenExcerptsSplit"
		}
	},
	{
		"context": "ProjectPanel",
		"use_key_equivalents": true,
		"bindings": {
			"left": "project_panel::CollapseSelectedEntry",
			"right": "project_panel::ExpandSelectedEntry",
			"cmd-n": "project_panel::NewFile",
			"cmd-d": "project_panel::Duplicate",
			"cmd-m": "project_panel::NewDirectory",
			"cmd-x": "project_panel::Cut",
			"cmd-c": "project_panel::Copy",
			"cmd-v": "project_panel::Paste",
			"cmd-alt-c": "project_panel::CopyPath",
			"alt-cmd-shift-c": "project_panel::CopyRelativePath",
			"enter": "project_panel::Rename",
			"f2": "project_panel::Rename",
			"backspace": ["project_panel::Trash", { "skip_prompt": false }],
			"delete": ["project_panel::Trash", { "skip_prompt": false }],
			"cmd-backspace": ["project_panel::Trash", { "skip_prompt": true }],
			"cmd-delete": ["project_panel::Delete", { "skip_prompt": false }],
			"alt-cmd-r": "project_panel::RevealInFileManager",
			"ctrl-shift-enter": "project_panel::OpenWithSystem",
			"cmd-alt-backspace": ["project_panel::Delete", { "skip_prompt": false }],
			"cmd-shift-f": "project_panel::NewSearchInDirectory",
			"shift-down": "menu::SelectNext",
			"shift-up": "menu::SelectPrev",
			"escape": "menu::Cancel"
		}
	},
	{
		"context": "ProjectPanel && not_editing",
		"use_key_equivalents": true,
		"bindings": {
			"space": "project_panel::Open"
		}
	},
	{
		"context": "GitPanel && !CommitEditor",
		"use_key_equivalents": true,
		"bindings": {
			"escape": "git_panel::Close"
		}
	},
	{
		"context": "GitPanel && ChangesList",
		"use_key_equivalents": true,
		"bindings": {
			"up": "menu::SelectPrev",
			"down": "menu::SelectNext",
			"cmd-up": "menu::SelectFirst",
			"cmd-down": "menu::SelectLast",
			"enter": "menu::Confirm",
			"space": "git::ToggleStaged",
			"cmd-shift-space": "git::StageAll",
			"ctrl-shift-space": "git::UnstageAll",
			"alt-down": "git_panel::FocusEditor"
		}
	},
	{
		"context": "GitPanel && CommitEditor > Editor",
		"use_key_equivalents": true,
		"bindings": {
			"alt-up": "git_panel::FocusChanges",
			"escape": "git_panel::FocusChanges",
			"cmd-enter": "git::CommitChanges",
			"cmd-alt-enter": "git::CommitAllChanges"
		}
	},
	{
		"context": "CollabPanel && not_editing",
		"use_key_equivalents": true,
		"bindings": {
			"ctrl-backspace": "collab_panel::Remove",
			"space": "menu::Confirm"
		}
	},
	{
		"context": "(CollabPanel && editing) > Editor",
		"use_key_equivalents": true,
		"bindings": {
			"space": "collab_panel::InsertSpace"
		}
	},
	{
		"context": "ChannelModal",
		"use_key_equivalents": true,
		"bindings": {
			"tab": "channel_modal::ToggleMode"
		}
	},
	{
		"context": "Picker > Editor",
		"use_key_equivalents": true,
		"bindings": {
			"tab": "picker::ConfirmCompletion",
			"alt-enter": ["picker::ConfirmInput", { "secondary": false }],
			"cmd-alt-enter": ["picker::ConfirmInput", { "secondary": true }]
		}
	},
	{
		"context": "ChannelModal > Picker > Editor",
		"use_key_equivalents": true,
		"bindings": {
			"tab": "channel_modal::ToggleMode"
		}
	},
	{
		"context": "FileFinder",
		"use_key_equivalents": true,
		"bindings": {
			"cmd": "file_finder::ToggleMenu"
		}
	},
	{
		"context": "FileFinder && menu_open",
		"use_key_equivalents": true,
		"bindings": {
			"j": "pane::SplitDown",
			"k": "pane::SplitUp",
			"h": "pane::SplitLeft",
			"l": "pane::SplitRight"
		}
	},
	{
		"context": "TabSwitcher",
		"use_key_equivalents": true,
		"bindings": {
			"ctrl-q": "tab_switcher::CloseSelectedItem"
		}
	},
	{
		"context": "Terminal",
		"use_key_equivalents": true,
		"bindings": {
			"ctrl-cmd-space": "terminal::ShowCharacterPalette",
			"cmd-c": "terminal::Copy",
			"cmd-v": "terminal::Paste",
			"cmd-a": "editor::SelectAll",
			"cmd-k": "terminal::Clear",
			"cmd-n": "workspace::NewTerminal",
			"ctrl-enter": "assistant::InlineAssist",
			// Some nice conveniences
			"cmd-backspace": ["terminal::SendText", "\u0015"],
			"cmd-right": ["terminal::SendText", "\u0005"],
			"cmd-left": ["terminal::SendText", "\u0001"],
			// Terminal.app compatibility
			"alt-left": ["terminal::SendText", "\u001bb"],
			"alt-right": ["terminal::SendText", "\u001bf"],
			// There are conflicting bindings for these keys in the global context.
			// these bindings override them, remove at your own risk:
			"up": ["terminal::SendKeystroke", "up"],
			"pageup": ["terminal::SendKeystroke", "pageup"],
			"down": ["terminal::SendKeystroke", "down"],
			"pagedown": ["terminal::SendKeystroke", "pagedown"],
			"escape": ["terminal::SendKeystroke", "escape"],
			"enter": ["terminal::SendKeystroke", "enter"],
			"ctrl-c": ["terminal::SendKeystroke", "ctrl-c"],
			"shift-pageup": "terminal::ScrollPageUp",
			"cmd-up": "terminal::ScrollPageUp",
			"shift-pagedown": "terminal::ScrollPageDown",
			"cmd-down": "terminal::ScrollPageDown",
			"shift-up": "terminal::ScrollLineUp",
			"shift-down": "terminal::ScrollLineDown",
			"shift-home": "terminal::ScrollToTop",
			"cmd-home": "terminal::ScrollToTop",
			"shift-end": "terminal::ScrollToBottom",
			"cmd-end": "terminal::ScrollToBottom",
			"ctrl-shift-space": "terminal::ToggleViMode",
			// !!!
			"ctrl-k up": "pane::SplitUp",
			"ctrl-k down": "pane::SplitDown",
			"ctrl-k left": "pane::SplitLeft",
			"ctrl-k right": "pane::SplitRight"
		}
	},
	{
		"context": "RateCompletionModal",
		"use_key_equivalents": true,
		"bindings": {
			"cmd-shift-enter": "zeta::ThumbsUpActiveCompletion",
			"cmd-shift-backspace": "zeta::ThumbsDownActiveCompletion",
			"shift-down": "zeta::NextEdit",
			"shift-up": "zeta::PreviousEdit",
			"right": "zeta::PreviewCompletion"
		}
	},
	{
		"context": "RateCompletionModal > Editor",
		"use_key_equivalents": true,
		"bindings": {
			"escape": "zeta::FocusCompletions",
			"cmd-shift-enter": "zeta::ThumbsUpActiveCompletion",
			"cmd-shift-backspace": "zeta::ThumbsDownActiveCompletion"
		}
	},
	{
		"context": "ZedPredictTos",
		"use_key_equivalents": true,
		"bindings": {
			"escape": "menu::Cancel"
		}
	},
	{
		"context": "VimControl && !menu",
		"bindings": {
			"i": ["vim::PushOperator", { "Object": { "around": false } }],
			"a": ["vim::PushOperator", { "Object": { "around": true } }],
			"h": "vim::Left",
			"l": "vim::Right",
			"k": "vim::Up",
			"j": "vim::Down",
			"backspace": "vim::Backspace",
			"enter": "vim::NextLineStart",
			"-": "vim::PreviousLineStart",
			"shift-tab": "vim::Tab",
			"tab": "vim::Tab",
			"space": "vim::Space",
			"$": "vim::EndOfLine",
			"^": "vim::FirstNonWhitespace",
			"_": "vim::StartOfLineDownward",
			"g _": "vim::EndOfLineDownward",
			"shift-g": "vim::EndOfDocument",
			"{": "vim::StartOfParagraph",
			"}": "vim::EndOfParagraph",
			"(": "vim::SentenceBackward",
			")": "vim::SentenceForward",
			"|": "vim::GoToColumn",
			"] ]": "vim::NextSectionStart",
			"] [": "vim::NextSectionEnd",
			"[ [": "vim::PreviousSectionStart",
			"[ ]": "vim::PreviousSectionEnd",
			"] m": "vim::NextMethodStart",
			"] M": "vim::NextMethodEnd",
			"[ m": "vim::PreviousMethodStart",
			"[ M": "vim::PreviousMethodEnd",
			"[ *": "vim::PreviousComment",
			"[ /": "vim::PreviousComment",
			"] *": "vim::NextComment",
			"] /": "vim::NextComment",
			// Word motions
			"w": "vim::NextWordStart",
			"e": "vim::NextWordEnd",
			"b": "vim::PreviousWordStart",
			"g e": "vim::PreviousWordEnd",
			// Subword motions
			// "w": "vim::NextSubwordStart",
			// "b": "vim::PreviousSubwordStart",
			// "e": "vim::NextSubwordEnd",
			// "g e": "vim::PreviousSubwordEnd",
			"shift-w": ["vim::NextWordStart", { "ignorePunctuation": true }],
			"shift-e": ["vim::NextWordEnd", { "ignorePunctuation": true }],
			"shift-b": ["vim::PreviousWordStart", { "ignorePunctuation": true }],
			"g shift-e": ["vim::PreviousWordEnd", { "ignorePunctuation": true }],
			// !!!
			"/": "vim::Search",
			"g /": "pane::DeploySearch",
			// !!!
			"?": ["vim::Search", { "backwards": true }],
			"*": "vim::MoveToNext",
			"#": "vim::MoveToPrev",
			// !!!
			"n": "vim::MoveToNextMatch",
			"shift-n": "vim::MoveToPrevMatch",
			// !!!
			"%": "vim::Matching",
			"] }": ["vim::UnmatchedForward", { "char": "}" }],
			"[ {": ["vim::UnmatchedBackward", { "char": "{" }],
			"] )": ["vim::UnmatchedForward", { "char": ")" }],
			"[ (": ["vim::UnmatchedBackward", { "char": "(" }],
			"f": ["vim::PushOperator", { "FindForward": { "before": false } }],
			"t": ["vim::PushOperator", { "FindForward": { "before": true } }],
			"shift-f": ["vim::PushOperator", { "FindBackward": { "after": false } }],
			"shift-t": ["vim::PushOperator", { "FindBackward": { "after": true } }],
			"m": ["vim::PushOperator", "Mark"],
			"'": ["vim::PushOperator", { "Jump": { "line": true } }],
			"`": ["vim::PushOperator", { "Jump": { "line": false } }],
			";": "vim::RepeatFind",
			",": "vim::RepeatFindReversed",
			"ctrl-o": "pane::GoBack",
			"ctrl-i": "pane::GoForward",
			"ctrl-]": "editor::GoToDefinition",
			"escape": ["vim::SwitchMode", "Normal"],
			"ctrl-[": ["vim::SwitchMode", "Normal"],
			"v": "vim::ToggleVisual",
			"shift-v": "vim::ToggleVisualLine",
			"ctrl-v": "vim::ToggleVisualBlock",
			"ctrl-q": "vim::ToggleVisualBlock",
			"shift-k": "editor::Hover",
			"shift-r": "vim::ToggleReplace",
			"0": "vim::StartOfLine",
			"home": "vim::StartOfLine",
			"ctrl-f": "vim::PageDown",
			"pagedown": "vim::PageDown",
			"ctrl-b": "vim::PageUp",
			"pageup": "vim::PageUp",
			"ctrl-d": "vim::ScrollDown",
			"ctrl-u": "vim::ScrollUp",
			"ctrl-e": "vim::LineDown",
			"ctrl-y": "vim::LineUp",
			// "g" commands
			"g g": "vim::StartOfDocument",
			"g h": "editor::Hover",
			"g t": "pane::ActivateNextItem",
			"g shift-t": "pane::ActivatePrevItem",
			"g d": "editor::GoToDefinition",
			"g shift-d": "editor::GoToDeclaration",
			"g y": "editor::GoToTypeDefinition",
			"g shift-i": "editor::GoToImplementation",
			"g x": "editor::OpenUrl",
			"g f": "editor::OpenSelectedFilename",
			"g n": "vim::SelectNextMatch",
			"g shift-n": "vim::SelectPreviousMatch",
			"g l": "vim::SelectNext",
			"g shift-l": "vim::SelectPrevious",
			"g >": ["editor::SelectNext", { "replace_newest": true }],
			"g <": ["editor::SelectPrevious", { "replace_newest": true }],
			"g a": "editor::SelectAllMatches",
			"g s": "outline::Toggle",
			"g shift-s": "project_symbols::Toggle",
			"g .": "editor::ToggleCodeActions", // zed specific
			"g shift-a": "editor::FindAllReferences", // zed specific
			"g space": "editor::OpenExcerpts", // zed specific
			"g *": ["vim::MoveToNext", { "partialWord": true }],
			"g #": ["vim::MoveToPrev", { "partialWord": true }],
			"g j": ["vim::Down", { "displayLines": true }],
			"g down": ["vim::Down", { "displayLines": true }],
			"g k": ["vim::Up", { "displayLines": true }],
			"g up": ["vim::Up", { "displayLines": true }],
			"g $": ["vim::EndOfLine", { "displayLines": true }],
			"g end": ["vim::EndOfLine", { "displayLines": true }],
			"g 0": ["vim::StartOfLine", { "displayLines": true }],
			"g home": ["vim::StartOfLine", { "displayLines": true }],
			"g ^": ["vim::FirstNonWhitespace", { "displayLines": true }],
			"g v": "vim::RestoreVisualSelection",
			"g ]": "editor::GoToDiagnostic",
			"g [": "editor::GoToPrevDiagnostic",
			"g i": "vim::InsertAtPrevious",
			"g ,": "vim::ChangeListNewer",
			"g ;": "vim::ChangeListOlder",
			// "shift-h": "vim::WindowTop",
			"shift-m": "vim::WindowMiddle",
			// !!!
			// "shift-l": "vim::WindowBottom",
			"q": "vim::ToggleRecord",
			//"shift-q": "vim::ReplayLastRecording",
			"@": ["vim::PushOperator", "ReplayRegister"],
			// z commands
			"z enter": ["workspace::SendKeystrokes", "z t ^"],
			"z -": ["workspace::SendKeystrokes", "z b ^"],
			"z ^": ["workspace::SendKeystrokes", "shift-h k z b ^"],
			"z +": ["workspace::SendKeystrokes", "shift-l j z t ^"],
			"z t": "editor::ScrollCursorTop",
			"z z": "editor::ScrollCursorCenter",
			"z .": ["workspace::SendKeystrokes", "z z ^"],
			"z b": "editor::ScrollCursorBottom",
			"z a": "editor::ToggleFold",
			"z shift-a": "editor::ToggleFoldRecursive",
			"z c": "editor::Fold",
			"z shift-c": "editor::FoldRecursive",
			"z o": "editor::UnfoldLines",
			"z shift-o": "editor::UnfoldRecursive",
			"z f": "editor::FoldSelectedRanges",
			"z shift-m": "editor::FoldAll",
			"z shift-r": "editor::UnfoldAll",
			"shift-z shift-q": ["pane::CloseActiveItem", { "saveIntent": "skip" }],
			"shift-z shift-z": ["pane::CloseActiveItem", { "saveIntent": "saveAll" }],
			// Count support
			"1": ["vim::Number", 1],
			"2": ["vim::Number", 2],
			"3": ["vim::Number", 3],
			"4": ["vim::Number", 4],
			"5": ["vim::Number", 5],
			"6": ["vim::Number", 6],
			"7": ["vim::Number", 7],
			"8": ["vim::Number", 8],
			"9": ["vim::Number", 9],
			"ctrl-w d": "editor::GoToDefinitionSplit",
			"ctrl-w g d": "editor::GoToDefinitionSplit",
			"ctrl-w shift-d": "editor::GoToTypeDefinitionSplit",
			"ctrl-w g shift-d": "editor::GoToTypeDefinitionSplit",
			"ctrl-w space": "editor::OpenExcerptsSplit",
			"ctrl-w g space": "editor::OpenExcerptsSplit",
			"ctrl-6": "pane::AlternateFile"
		}
	},
	{
		"context": "vim_mode == normal",
		"bindings": {
			"ctrl-[": "editor::Cancel",
			"escape": "editor::Cancel",
			":": "command_palette::Toggle",
			/// !!!
			"v r": "vim::Repeat",
			"c": ["vim::PushOperator", "Change"],
			"shift-c": "vim::ChangeToEndOfLine",
			"d": ["vim::PushOperator", "Delete"],
			"shift-d": "vim::DeleteToEndOfLine",
			// "shift-j": "vim::JoinLines",
			"g shift-j": "vim::JoinLinesNoWhitespace",
			"y": ["vim::PushOperator", "Yank"],
			"shift-y": "vim::YankLine",
			"i": "vim::InsertBefore",
			"shift-i": "vim::InsertFirstNonWhitespace",
			"a": "vim::InsertAfter",
			"shift-a": "vim::InsertEndOfLine",
			"x": "vim::DeleteRight",
			"shift-x": "vim::DeleteLeft",
			"o": "vim::InsertLineBelow",
			"shift-o": "vim::InsertLineAbove",
			"~": "vim::ChangeCase",
			"ctrl-a": "vim::Increment",
			"ctrl-x": "vim::Decrement",
			"p": "vim::Paste",
			"shift-p": ["vim::Paste", { "before": true }],
			"u": "vim::Undo",
			"ctrl-r": "vim::Redo",
			"r": ["vim::PushOperator", "Replace"],
			"s": "vim::Substitute",
			"shift-s": "vim::SubstituteLine",
			">": ["vim::PushOperator", "Indent"],
			"<": ["vim::PushOperator", "Outdent"],
			"=": ["vim::PushOperator", "AutoIndent"],
			"!": ["vim::PushOperator", "ShellCommand"],
			"g u": ["vim::PushOperator", "Lowercase"],
			"g shift-u": ["vim::PushOperator", "Uppercase"],
			"g ~": ["vim::PushOperator", "OppositeCase"],
			"\"": ["vim::PushOperator", "Register"],
			"g w": ["vim::PushOperator", "Rewrap"],
			"g q": ["vim::PushOperator", "Rewrap"],
			"ctrl-pagedown": "pane::ActivateNextItem",
			"ctrl-pageup": "pane::ActivatePrevItem",
			"insert": "vim::InsertBefore",
			// tree-sitter related commands
			"[ x": "vim::SelectLargerSyntaxNode",
			"] x": "vim::SelectSmallerSyntaxNode",
			"] d": "editor::GoToDiagnostic",
			"[ d": "editor::GoToPrevDiagnostic",
			"] c": "editor::GoToHunk",
			"[ c": "editor::GoToPrevHunk",
			"g c": ["vim::PushOperator", "ToggleComments"]
		}
	},
	{
		"context": "VimControl && VimCount",
		"bindings": {
			"0": ["vim::Number", 0],
			":": "vim::CountCommand"
		}
	},
	{
		"context": "vim_mode == visual",
		"bindings": {
			":": "vim::VisualCommand",
			"u": "vim::ConvertToLowerCase",
			"shift-u": "vim::ConvertToUpperCase",
			"shift-o": "vim::OtherEnd",
			// "o": "vim::OtherEnd",
			"d": "vim::VisualDelete",
			"x": "vim::VisualDelete",
			"shift-d": "vim::VisualDeleteLine",
			"shift-x": "vim::VisualDeleteLine",
			"y": "vim::VisualYank",
			"shift-y": "vim::VisualYankLine",
			"p": "vim::Paste",
			"shift-p": ["vim::Paste", { "preserveClipboard": true }],
			"c": "vim::Substitute",
			"s": "vim::Substitute",
			"shift-r": "vim::SubstituteLine",
			"shift-s": "vim::SubstituteLine",
			"~": "vim::ChangeCase",
			"*": ["vim::MoveToNext", { "partialWord": true }],
			"#": ["vim::MoveToPrev", { "partialWord": true }],
			"ctrl-a": "vim::Increment",
			"ctrl-x": "vim::Decrement",
			"g ctrl-a": ["vim::Increment", { "step": true }],
			"g ctrl-x": ["vim::Decrement", { "step": true }],
			"shift-i": "vim::InsertBefore",
			"shift-a": "vim::InsertAfter",
			"g shift-i": "vim::VisualInsertFirstNonWhiteSpace",
			"g shift-a": "vim::VisualInsertEndOfLine",
			// "shift-j": "vim::JoinLines",
			"g shift-j": "vim::JoinLinesNoWhitespace",
			"r": ["vim::PushOperator", "Replace"],
			"ctrl-c": ["vim::SwitchMode", "Normal"],
			"ctrl-[": ["vim::SwitchMode", "Normal"],
			"escape": ["vim::SwitchMode", "Normal"],
			">": "vim::Indent",
			"<": "vim::Outdent",
			"=": "vim::AutoIndent",
			"!": "vim::ShellCommand",
			"i": ["vim::PushOperator", { "Object": { "around": false } }],
			"a": ["vim::PushOperator", { "Object": { "around": true } }],
			"g c": "vim::ToggleComments",
			"g q": "vim::Rewrap",
			"\"": ["vim::PushOperator", "Register"],
			// tree-sitter related commands
			"[ x": "editor::SelectLargerSyntaxNode",
			"] x": "editor::SelectSmallerSyntaxNode"
		}
	},
	{
		"context": "vim_mode == insert",
		"bindings": {
			"ctrl-c": "vim::NormalBefore",
			"ctrl-[": "vim::NormalBefore",
			"escape": "vim::NormalBefore",
			"g": null,
			"ctrl-x": null,
			// "ctrl-x ctrl-o": "editor::ShowCompletions",
			"ctrl-x ctrl-a": "assistant::InlineAssist", // zed specific
			"ctrl-x ctrl-c": "editor::ShowInlineCompletion", // zed specific
			"ctrl-x ctrl-l": "editor::ToggleCodeActions", // zed specific
			"ctrl-x ctrl-z": "editor::Cancel",
			"ctrl-w": "editor::DeleteToPreviousWordStart",
			"ctrl-u": "editor::DeleteToBeginningOfLine",
			"ctrl-t": "vim::Indent",
			"ctrl-d": "vim::Outdent",
			"ctrl-k": ["vim::PushOperator", { "Digraph": {} }],
			"ctrl-v": ["vim::PushOperator", { "Literal": {} }],
			"ctrl-shift-v": "editor::Paste", // note: this is *very* similar to ctrl-v in vim, but ctrl-shift-v on linux is the typical shortcut for paste when ctrl-v is already in use.
			"ctrl-q": ["vim::PushOperator", { "Literal": {} }],
			"ctrl-shift-q": ["vim::PushOperator", { "Literal": {} }],
			"ctrl-r": ["vim::PushOperator", "Register"],
			"insert": "vim::ToggleReplace",
			"ctrl-o": "vim::TemporaryNormal"
		}
	},
	{
		"context": "vim_mode == helix_normal",
		"bindings": {
			"i": "vim::InsertBefore",
			"a": "vim::InsertAfter",
			"d": "vim::HelixDelete",
			"w": "vim::NextWordStart",
			"e": "vim::NextWordEnd",
			"b": "vim::PreviousWordStart",

			"h": "vim::Left",
			"j": "vim::Down",
			"k": "vim::Up",
			"l": "vim::Right"
		}
	},

	{
		"context": "vim_mode == insert && !(showing_code_actions || showing_completions)",
		"bindings": {
			"ctrl-p": "editor::ShowCompletions",
			"enter": "editor::Newline"
		}
	},
	{
		"context": "vim_mode == replace",
		"bindings": {
			"ctrl-c": "vim::NormalBefore",
			"ctrl-[": "vim::NormalBefore",
			"escape": "vim::NormalBefore",
			"ctrl-k": ["vim::PushOperator", { "Digraph": {} }],
			"ctrl-v": ["vim::PushOperator", { "Literal": {} }],
			"ctrl-shift-v": "editor::Paste", // note: this is *very* similar to ctrl-v in vim, but ctrl-shift-v on linux is the typical shortcut for paste when ctrl-v is already in use.
			"ctrl-q": ["vim::PushOperator", { "Literal": {} }],
			"ctrl-shift-q": ["vim::PushOperator", { "Literal": {} }],
			"backspace": "vim::UndoReplace",
			"tab": "vim::Tab",
			"enter": "vim::Enter",
			"insert": "vim::InsertBefore"
		}
	},
	{
		"context": "vim_mode == waiting",
		"bindings": {
			"tab": "vim::Tab",
			"enter": "vim::Enter",
			"ctrl-c": "vim::ClearOperators",
			"ctrl-[": "vim::ClearOperators",
			"escape": "vim::ClearOperators",
			"ctrl-k": ["vim::PushOperator", { "Digraph": {} }],
			"ctrl-v": ["vim::PushOperator", { "Literal": {} }],
			"ctrl-q": ["vim::PushOperator", { "Literal": {} }]
		}
	},
	{
		"context": "vim_mode == operator",
		"bindings": {
			"ctrl-c": "vim::ClearOperators",
			"ctrl-[": "vim::ClearOperators",
			"escape": "vim::ClearOperators",
			"g c": "vim::Comment"
		}
	},
	{
		"context": "vim_operator == a || vim_operator == i || vim_operator == cs",
		"bindings": {
			"w": "vim::Word",
			"shift-w": ["vim::Word", { "ignorePunctuation": true }],
			// Subword TextObject
			// "w": "vim::Subword",
			// "shift-w": ["vim::Subword", { "ignorePunctuation": true }],
			"t": "vim::Tag",
			"s": "vim::Sentence",
			"p": "vim::Paragraph",
			"'": "vim::Quotes",
			"`": "vim::BackQuotes",
			"\"": "vim::DoubleQuotes",
			"q": "vim::AnyQuotes",
			"|": "vim::VerticalBars",
			"(": "vim::Parentheses",
			")": "vim::Parentheses",
			"b": "vim::Parentheses",
			"[": "vim::SquareBrackets",
			"]": "vim::SquareBrackets",
			"r": "vim::SquareBrackets",
			"{": "vim::CurlyBrackets",
			"}": "vim::CurlyBrackets",
			"shift-b": "vim::CurlyBrackets",
			"<": "vim::AngleBrackets",
			">": "vim::AngleBrackets",
			"a": "vim::Argument",
			"i": "vim::IndentObj",
			"shift-i": ["vim::IndentObj", { "includeBelow": true }],
			"f": "vim::Method",
			"c": "vim::Class"
		}
	},
	{
		"context": "vim_operator == c",
		"bindings": {
			"c": "vim::CurrentLine",
			"d": "editor::Rename", // zed specific
			"s": ["vim::PushOperator", { "ChangeSurrounds": {} }]
		}
	},
	{
		"context": "vim_operator == d",
		"bindings": {
			"d": "vim::CurrentLine",
			"s": ["vim::PushOperator", "DeleteSurrounds"],
			"o": "editor::ToggleHunkDiff", // "d o"
			"p": "editor::RevertSelectedHunks" // "d p"
		}
	},
	{
		"context": "vim_operator == gu",
		"bindings": {
			"g u": "vim::CurrentLine",
			"u": "vim::CurrentLine"
		}
	},
	{
		"context": "vim_operator == gU",
		"bindings": {
			"g shift-u": "vim::CurrentLine",
			"shift-u": "vim::CurrentLine"
		}
	},
	{
		"context": "vim_operator == g~",
		"bindings": {
			"g ~": "vim::CurrentLine",
			"~": "vim::CurrentLine"
		}
	},
	{
		"context": "vim_operator == gq",
		"bindings": {
			"g q": "vim::CurrentLine",
			"q": "vim::CurrentLine",
			"g w": "vim::CurrentLine",
			"w": "vim::CurrentLine"
		}
	},
	{
		"context": "vim_operator == y",
		"bindings": {
			"y": "vim::CurrentLine",
			"s": ["vim::PushOperator", { "AddSurrounds": {} }]
		}
	},
	{
		"context": "vim_operator == ys",
		"bindings": {
			"s": "vim::CurrentLine"
		}
	},
	{
		"context": "vim_operator == >",
		"bindings": {
			">": "vim::CurrentLine"
		}
	},
	{
		"context": "vim_operator == <",
		"bindings": {
			"<": "vim::CurrentLine"
		}
	},
	{
		"context": "vim_operator == eq",
		"bindings": {
			"=": "vim::CurrentLine"
		}
	},
	{
		"context": "vim_operator == sh",
		"bindings": {
			"!": "vim::CurrentLine"
		}
	},
	{
		"context": "vim_operator == gc",
		"bindings": {
			"c": "vim::CurrentLine"
		}
	},
	{
		"context": "vim_mode == literal",
		"bindings": {
			"ctrl-@": ["vim::Literal", ["ctrl-@", "\u0000"]],
			"ctrl-a": ["vim::Literal", ["ctrl-a", "\u0001"]],
			"ctrl-b": ["vim::Literal", ["ctrl-b", "\u0002"]],
			"ctrl-c": ["vim::Literal", ["ctrl-c", "\u0003"]],
			"ctrl-d": ["vim::Literal", ["ctrl-d", "\u0004"]],
			"ctrl-e": ["vim::Literal", ["ctrl-e", "\u0005"]],
			"ctrl-f": ["vim::Literal", ["ctrl-f", "\u0006"]],
			"ctrl-g": ["vim::Literal", ["ctrl-g", "\u0007"]],
			"ctrl-h": ["vim::Literal", ["ctrl-h", "\u0008"]],
			"ctrl-i": ["vim::Literal", ["ctrl-i", "\u0009"]],
			"ctrl-j": ["vim::Literal", ["ctrl-j", "\u000A"]],
			"ctrl-k": ["vim::Literal", ["ctrl-k", "\u000B"]],
			"ctrl-l": ["vim::Literal", ["ctrl-l", "\u000C"]],
			"ctrl-m": ["vim::Literal", ["ctrl-m", "\u000D"]],
			"ctrl-n": ["vim::Literal", ["ctrl-n", "\u000E"]],
			"ctrl-o": ["vim::Literal", ["ctrl-o", "\u000F"]],
			"ctrl-p": ["vim::Literal", ["ctrl-p", "\u0010"]],
			"ctrl-q": ["vim::Literal", ["ctrl-q", "\u0011"]],
			"ctrl-r": ["vim::Literal", ["ctrl-r", "\u0012"]],
			"ctrl-s": ["vim::Literal", ["ctrl-s", "\u0013"]],
			"ctrl-t": ["vim::Literal", ["ctrl-t", "\u0014"]],
			"ctrl-u": ["vim::Literal", ["ctrl-u", "\u0015"]],
			"ctrl-v": ["vim::Literal", ["ctrl-v", "\u0016"]],
			"ctrl-w": ["vim::Literal", ["ctrl-w", "\u0017"]],
			"ctrl-x": ["vim::Literal", ["ctrl-x", "\u0018"]],
			"ctrl-y": ["vim::Literal", ["ctrl-y", "\u0019"]],
			"ctrl-z": ["vim::Literal", ["ctrl-z", "\u001A"]],
			"ctrl-[": ["vim::Literal", ["ctrl-[", "\u001B"]],
			"ctrl-\\": ["vim::Literal", ["ctrl-\\", "\u001C"]],
			"ctrl-]": ["vim::Literal", ["ctrl-]", "\u001D"]],
			"ctrl-^": ["vim::Literal", ["ctrl-^", "\u001E"]],
			"ctrl-_": ["vim::Literal", ["ctrl-_", "\u001F"]],
			"escape": ["vim::Literal", ["escape", "\u001B"]],
			"enter": ["vim::Literal", ["enter", "\u000D"]],
			"tab": ["vim::Literal", ["tab", "\u0009"]],
			// zed extensions:
			"backspace": ["vim::Literal", ["backspace", "\u0008"]],
			"delete": ["vim::Literal", ["delete", "\u007F"]]
		}
	},
	{
		"context": "BufferSearchBar && !in_replace",
		"bindings": {
			"enter": "vim::SearchSubmit",
			"escape": "buffer_search::Dismiss"
		}
	},
	{
		"context": "ProjectPanel || CollabPanel || OutlinePanel || ChatPanel || VimControl || EmptyPane || SharedScreen || MarkdownPreview || KeyContextView",
		"bindings": {
			// window related commands (ctrl-w X)
			// !!!
			"ctrl-w": null,
			"space l": ["workspace::ActivatePaneInDirection", "Right"],
			"space k": ["workspace::ActivatePaneInDirection", "Up"],
			"space j": ["workspace::ActivatePaneInDirection", "Down"],
			"space h": ["workspace::ActivatePaneInDirection", "Left"],

			"shift-cmd-a": ["workspace::SwapPaneInDirection", "Left"],
			"shift-cmd-d": ["workspace::SwapPaneInDirection", "Right"],
			"shift-cmd-w": ["workspace::SwapPaneInDirection", "Up"],
			"shift-cmd-s": ["workspace::SwapPaneInDirection", "Down"],

			">": ["vim::ResizePane", "Widen"],
			"<": ["vim::ResizePane", "Narrow"],


			"ctrl-w -": ["vim::ResizePane", "Shorten"],
			"ctrl-w +": ["vim::ResizePane", "Lengthen"],
			"ctrl-w _": "vim::MaximizePane",
			"ctrl-w =": "vim::ResetPaneSizes",
			// "ctrl-w g t": "pane::ActivateNextItem",
			// "ctrl-w ctrl-g t": "pane::ActivateNextItem",
			// "ctrl-w g shift-t": "pane::ActivatePrevItem",
			// "ctrl-w ctrl-g shift-t": "pane::ActivatePrevItem",
			// "space l": "workspace::ActivateNextPane",
			// "space h": "workspace::ActivatePreviousPane",

			/// !!!
			"; v": "pane::SplitVertical",
			"; h": "pane::SplitHorizontal",

			"space q": "pane::CloseAllItems",
			"space q i": "workspace::CloseInactiveTabsAndPanes",
			"; n v": "workspace::NewFileSplitHorizontal",
			"; n h": "workspace::NewFileSplitHorizontal"
		}
	},
	{
		"context": "EmptyPane || SharedScreen || MarkdownPreview || KeyContextView || Welcome",
		"bindings": {
			":": "command_palette::Toggle",
			// !!!
			"g /": "pane::DeploySearch"
		}
	},
	{
		// netrw compatibility
		"context": "ProjectPanel && not_editing",
		"bindings": {
			":": "command_palette::Toggle",
			"%": "project_panel::NewFile",
			"/": "project_panel::NewSearchInDirectory",
			"d": "project_panel::NewDirectory",
			"enter": "project_panel::OpenPermanent",
			"escape": "project_panel::ToggleFocus",
			"h": "project_panel::CollapseSelectedEntry",
			"j": "menu::SelectNext",
			"k": "menu::SelectPrev",
			"l": "project_panel::ExpandSelectedEntry",
			"o": "project_panel::OpenPermanent",
			"shift-d": "project_panel::Delete",
			"shift-r": "project_panel::Rename",
			"t": "project_panel::OpenPermanent",
			"v": "project_panel::OpenPermanent",
			"p": "project_panel::Open",
			"x": "project_panel::RevealInFileManager",
			"s": "project_panel::OpenWithSystem",
			"] c": "project_panel::SelectNextGitEntry",
			"[ c": "project_panel::SelectPrevGitEntry",
			"] d": "project_panel::SelectNextDiagnostic",
			"[ d": "project_panel::SelectPrevDiagnostic",
			"}": "project_panel::SelectNextDirectory",
			"{": "project_panel::SelectPrevDirectory",
			"shift-g": "menu::SelectLast",
			"g g": "menu::SelectFirst",
			"-": "project_panel::SelectParent",
			"ctrl-6": "pane::AlternateFile"
		}
	},
	{
		"context": "OutlinePanel && not_editing",
		"bindings": {
			"j": "menu::SelectNext",
			"k": "menu::SelectPrev",
			"shift-g": "menu::SelectLast",
			"g g": "menu::SelectFirst"
		}
	}
]
